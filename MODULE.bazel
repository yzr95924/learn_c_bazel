"""
learn_c_bazel main bzlmod file
"""
module(
    name = "learn_c_bazel",
    version = "0.0.1",
)

#### local module ####
# my buildframe
bazel_dep(name = "my_buildframe", repo_name = "my_buildframe")
local_path_override(
    module_name = "my_buildframe",
    path = "./bazel"
)

# extern module
# bazel build tool
bazel_dep(name = "platforms", version = "1.0.0", repo_name = "platforms")
bazel_dep(name = "rules_cc", version = "0.1.2", repo_name = "rules_cc")
bazel_dep(name = "rules_foreign_cc", version = "0.15.0", repo_name = "rules_foreign_cc")

# google suit
# The `repo_name` attribute allows users to reference this dependency via the `com_glog` repo name.
bazel_dep(name = "glog", version = "0.7.1", repo_name = "com_glog")
bazel_dep(name = "googletest", version = "1.16.0", repo_name = "com_googletest")
bazel_dep(name = "google_benchmark", version = "1.9.1", repo_name = "com_google_benchmark")

# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    commit = "4f28899228fb3ad0126897876f147ca15026151e",
    # Replace the commit hash (above) with the latest (https://github.com/hedronvision/bazel-compile-commands-extractor/commits/main).
    # Even better, set up Renovate and let it do the work for you (see "Suggestion: Updates" in the README).
)

# 自己可以构建cc_toolchain
# register_toolchains(
#     "@my_buildframe//:cc_toolchain_for_linux_x86_64"
# )

libpq_repo = use_repo_rule(
    "//:sys_repo.bzl",
    "libpq_repo"
)

libpq_repo(name = "libpq")